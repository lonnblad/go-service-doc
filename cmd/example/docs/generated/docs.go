// This file was generated by lonnblad/go-service-doc at
// 2020-02-19 10:48:40.396657 -0300 -03 m=+0.008846025
package docs

import (
	"net/http"
	"strings"

	"github.com/blevesearch/bleve"
)

const contentType = "Content-Type"
const mimeHTML = "text/html"
const mimeCSS = "text/css"

func Handler() http.Handler {
	index, _ := createSearchIndex()

	mux := http.NewServeMux()
	mux.HandleFunc("/docs/service/markdown.css", cssHandler)
	mux.HandleFunc("/docs/service/search", searchHandler(index))
	mux.HandleFunc("/docs/service", servicePageHandler)
	mux.HandleFunc("/docs/service/donkey-bar", donkeyBarPageHandler)
	mux.HandleFunc("/docs/service/monkey-bar", monkeyBarPageHandler)
	mux.HandleFunc("/docs/service/static/animal-bars.svg", animalBarsStaticFileHandler)

	return mux
}

func cssHandler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, mimeCSS)

	const content = `@font-face {
  font-family: octicons-link;
  src: url(data:font/woff; charset=utf-8; base64,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) format('woff');
}

.markdown-body .flex-container {
  display: flex;
  height: 100vh;
}

.markdown-body .menu-container {
  padding-right: 0.5em;
  border-right: 2px solid #24292e;
  min-width: 20em;
  width: 20vw;
  overflow: scroll;
}

.markdown-body .menu-container .menu-header {
  padding-left: 16px;
  padding-right: 8px;
  padding-bottom: 16px;
}

.markdown-body .menu-container .menu-header .menu-search {
  display: flex;
}

.markdown-body .menu-container .menu-header .menu-search input[type=text] {
  padding: 4px;
  font-size: 16px;
  width: 100%;
}

.markdown-body .menu-container .menu-header .menu-search input[type=text]:focus{
  outline: none;
}

.markdown-body .menu-container .menu-header .menu-search button {
  padding: 8px 10px;
  background: #ddd;
  font-size: 17px;
  border: none;
  cursor: pointer;
}

.markdown-body .menu-container .menu-header .menu-search button:hover {
  background: #ccc;
}

.markdown-body .doc-container {
  padding: 0em 1em;
  width: 80vw;
  overflow: scroll;
}

.markdown-body .doc-container .search-result-card {
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
  transition: 0.3s;
  padding: 0.1em 1em;
  margin-bottom: 1em;
  cursor: pointer;
}


.markdown-body .doc-container .search-result-card:hover {
  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

.markdown-body .doc-container .search-result-card .search-result-content {
  padding: 0em 0.8em;
}

.markdown-body .octicon {
  display: inline-block;
  fill: currentColor;
  vertical-align: text-bottom;
}
.markdown-body .anchor {
  float: left;
  line-height: 1;
  margin-left: -20px;
  padding-right: 4px;
}
.markdown-body .anchor:focus {
  outline: none;
}
.markdown-body h1 .octicon-link, .markdown-body h2 .octicon-link, .markdown-body h3 .octicon-link, .markdown-body h4 .octicon-link, .markdown-body h5 .octicon-link, .markdown-body h6 .octicon-link {
  color: #1b1f23;
  vertical-align: middle;
  visibility: hidden;
}
.markdown-body h1:hover .anchor, .markdown-body h2:hover .anchor, .markdown-body h3:hover .anchor, .markdown-body h4:hover .anchor, .markdown-body h5:hover .anchor, .markdown-body h6:hover .anchor {
  text-decoration: none;
}
.markdown-body h1:hover .anchor .octicon-link, .markdown-body h2:hover .anchor .octicon-link, .markdown-body h3:hover .anchor .octicon-link, .markdown-body h4:hover .anchor .octicon-link, .markdown-body h5:hover .anchor .octicon-link, .markdown-body h6:hover .anchor .octicon-link {
  visibility: visible;
}
.markdown-body {
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #24292e;
  line-height: 1.5;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;
  font-size: 16px;
  line-height: 1.5;
  word-wrap: break-word;
  margin: 0px;
}
.markdown-body .pl-c {
  color: #6a737d;
}
.markdown-body .pl-c1, .markdown-body .pl-s .pl-v {
  color: #005cc5;
}
.markdown-body .pl-e, .markdown-body .pl-en {
  color: #6f42c1;
}
.markdown-body .pl-s .pl-s1, .markdown-body .pl-smi {
  color: #24292e;
}
.markdown-body .pl-ent {
  color: #22863a;
}
.markdown-body .pl-k {
  color: #d73a49;
}
.markdown-body .pl-pds, .markdown-body .pl-s, .markdown-body .pl-s .pl-pse .pl-s1, .markdown-body .pl-sr, .markdown-body .pl-sr .pl-cce, .markdown-body .pl-sr .pl-sra, .markdown-body .pl-sr .pl-sre {
  color: #032f62;
}
.markdown-body .pl-smw, .markdown-body .pl-v {
  color: #e36209;
}
.markdown-body .pl-bu {
  color: #b31d28;
}
.markdown-body .pl-ii {
  background-color: #b31d28;
  color: #fafbfc;
}
.markdown-body .pl-c2 {
  background-color: #d73a49;
  color: #fafbfc;
}
.markdown-body .pl-c2:before {
  content: "^M";
}
.markdown-body .pl-sr .pl-cce {
  color: #22863a;
  font-weight: 700;
}
.markdown-body .pl-ml {
  color: #735c0f;
}
.markdown-body .pl-mh, .markdown-body .pl-mh .pl-en, .markdown-body .pl-ms {
  color: #005cc5;
  font-weight: 700;
}
.markdown-body .pl-mi {
  color: #24292e;
  font-style: italic;
}
.markdown-body .pl-mb {
  color: #24292e;
  font-weight: 700;
}
.markdown-body .pl-md {
  background-color: #ffeef0;
  color: #b31d28;
}
.markdown-body .pl-mi1 {
  background-color: #f0fff4;
  color: #22863a;
}
.markdown-body .pl-mc {
  background-color: #ffebda;
  color: #e36209;
}
.markdown-body .pl-mi2 {
  background-color: #005cc5;
  color: #f6f8fa;
}
.markdown-body .pl-mdr {
  color: #6f42c1;
  font-weight: 700;
}
.markdown-body .pl-ba {
  color: #586069;
}
.markdown-body .pl-sg {
  color: #959da5;
}
.markdown-body .pl-corl {
  color: #032f62;
  text-decoration: underline;
}
.markdown-body details {
  display: block;
}
.markdown-body summary {
  display: list-item;
}
.markdown-body a {
  background-color: transparent;
}
.markdown-body a:active, .markdown-body a:hover {
  outline-width: 0;
}
.markdown-body strong {
  font-weight: inherit;
  font-weight: bolder;
}
.markdown-body h1 {
  font-size: 2em;
  margin: .67em 0;
}
.markdown-body img {
  border-style: none;
}
.markdown-body code, .markdown-body kbd, .markdown-body pre {
  font-family: monospace, monospace;
  font-size: 1em;
}
.markdown-body hr {
  box-sizing: content-box;
  height: 0;
  overflow: visible;
}
.markdown-body input {
  font: inherit;
  margin: 0;
}
.markdown-body input {
  overflow: visible;
}
.markdown-body [type=checkbox] {
  box-sizing: border-box;
  padding: 0;
}
.markdown-body * {
  box-sizing: border-box;
}
.markdown-body input {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}
.markdown-body a {
  color: #0366d6;
  text-decoration: none;
}
.markdown-body a:hover {
  text-decoration: underline;
}
.markdown-body strong {
  font-weight: 600;
}
.markdown-body hr {
  background: transparent;
  border: 0;
  border-bottom: 1px solid #dfe2e5;
  height: 0;
  margin: 15px 0;
  overflow: hidden;
}
.markdown-body hr:before {
  content: "";
  display: table;
}
.markdown-body hr:after {
  clear: both;
  content: "";
  display: table;
}
.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}
.markdown-body td, .markdown-body th {
  padding: 0;
}
.markdown-body details summary {
  cursor: pointer;
}
.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 {
  margin-bottom: 0;
  margin-top: 0;
}
.markdown-body h1 {
  font-size: 32px;
}
.markdown-body h1, .markdown-body h2 {
  font-weight: 600;
}
.markdown-body h2 {
  font-size: 24px;
}
.markdown-body h3 {
  font-size: 20px;
}
.markdown-body h3, .markdown-body h4 {
  font-weight: 600;
}
.markdown-body h4 {
  font-size: 16px;
}
.markdown-body h5 {
  font-size: 14px;
}
.markdown-body h5, .markdown-body h6 {
  font-weight: 600;
}
.markdown-body h6 {
  font-size: 12px;
}
.markdown-body p {
  margin-bottom: 10px;
  margin-top: 0;
}
.markdown-body blockquote {
  margin: 0;
}
.markdown-body ol, .markdown-body ul {
  margin-bottom: 0;
  margin-top: 0;
  padding-left: 0;
}
.markdown-body ol ol, .markdown-body ul ol {
  list-style-type: lower-roman;
}
.markdown-body ol ol ol, .markdown-body ol ul ol, .markdown-body ul ol ol, .markdown-body ul ul ol {
  list-style-type: lower-alpha;
}
.markdown-body dd {
  margin-left: 0;
}
.markdown-body code, .markdown-body pre {
  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;
  font-size: 12px;
}
.markdown-body pre {
  margin-bottom: 0;
  margin-top: 0;
}
.markdown-body input::-webkit-inner-spin-button, .markdown-body input::-webkit-outer-spin-button {
  -webkit-appearance: none;
  appearance: none;
  margin: 0;
}
.markdown-body .border {
  border: 1px solid #e1e4e8 !important;
}
.markdown-body .border-0 {
  border: 0 !important;
}
.markdown-body .border-bottom {
  border-bottom: 1px solid #e1e4e8 !important;
}
.markdown-body .rounded-1 {
  border-radius: 3px !important;
}
.markdown-body .bg-white {
  background-color: #fff !important;
}
.markdown-body .bg-gray-light {
  background-color: #fafbfc !important;
}
.markdown-body .text-gray-light {
  color: #6a737d !important;
}
.markdown-body .mb-0 {
  margin-bottom: 0 !important;
}
.markdown-body .my-2 {
  margin-bottom: 8px !important;
  margin-top: 8px !important;
}
.markdown-body .pl-0 {
  padding-left: 0 !important;
}
.markdown-body .py-0 {
  padding-bottom: 0 !important;
  padding-top: 0 !important;
}
.markdown-body .pl-1 {
  padding-left: 4px !important;
}
.markdown-body .pl-2 {
  padding-left: 8px !important;
}
.markdown-body .py-2 {
  padding-bottom: 8px !important;
  padding-top: 8px !important;
}
.markdown-body .pl-3, .markdown-body .px-3 {
  padding-left: 16px !important;
}
.markdown-body .px-3 {
  padding-right: 16px !important;
}
.markdown-body .pl-4 {
  padding-left: 24px !important;
}
.markdown-body .pl-5 {
  padding-left: 32px !important;
}
.markdown-body .pl-6 {
  padding-left: 40px !important;
}
.markdown-body .f6 {
  font-size: 12px !important;
}
.markdown-body .lh-condensed {
  line-height: 1.25 !important;
}
.markdown-body .text-bold {
  font-weight: 600 !important;
}
.markdown-body:before {
  content: "";
  display: table;
}
.markdown-body:after {
  clear: both;
  content: "";
  display: table;
}
.markdown-body>:first-child {
  margin-top: 0 !important;
}
.markdown-body>:last-child {
  margin-bottom: 0 !important;
}
.markdown-body a:not([href]) {
  color: inherit;
  text-decoration: none;
}
.markdown-body blockquote, .markdown-body dl, .markdown-body ol, .markdown-body p, .markdown-body pre, .markdown-body table, .markdown-body ul {
  margin-bottom: 16px;
  margin-top: 0;
}
.markdown-body hr {
  background-color: #e1e4e8;
  border: 0;
  height: .25em;
  margin: 24px 0;
  padding: 0;
}
.markdown-body blockquote {
  border-left: .25em solid #dfe2e5;
  color: #6a737d;
  padding: 0 1em;
}
.markdown-body blockquote>:first-child {
  margin-top: 0;
}
.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}
.markdown-body kbd {
  background-color: #fafbfc;
  border: 1px solid #c6cbd1;
  border-bottom-color: #959da5;
  border-radius: 3px;
  box-shadow: inset 0 -1px 0 #959da5;
  color: #444d56;
  display: inline-block;
  font-size: 11px;
  line-height: 10px;
  padding: 3px 5px;
  vertical-align: middle;
}
.markdown-body h1, .markdown-body h2, .markdown-body h3, .markdown-body h4, .markdown-body h5, .markdown-body h6 {
  font-weight: 600;
  line-height: 1.25;
  margin-bottom: 16px;
  margin-top: 24px;
}
.markdown-body h1 {
  font-size: 2em;
}
.markdown-body h1, .markdown-body h2 {
  border-bottom: 1px solid #eaecef;
  padding-bottom: .3em;
}
.markdown-body h2 {
  font-size: 1.5em;
}
.markdown-body h3 {
  font-size: 1.25em;
}
.markdown-body h4 {
  font-size: 1em;
}
.markdown-body h5 {
  font-size: .875em;
}
.markdown-body h6 {
  color: #6a737d;
  font-size: .85em;
}
.markdown-body ol, .markdown-body ul {
  padding-left: 2em;
}
.markdown-body ol ol, .markdown-body ol ul, .markdown-body ul ol, .markdown-body ul ul {
  margin-bottom: 0;
  margin-top: 0;
}
.markdown-body li {
  word-wrap: break-all;
}
.markdown-body li>p {
  margin-top: 16px;
}
.markdown-body li+li {
  margin-top: .25em;
}
.markdown-body dl {
  padding: 0;
}
.markdown-body dl dt {
  font-size: 1em;
  font-style: italic;
  font-weight: 600;
  margin-top: 16px;
  padding: 0;
}
.markdown-body dl dd {
  margin-bottom: 16px;
  padding: 0 16px;
}
.markdown-body table {
  display: block;
  overflow: auto;
  width: 100%;
}
.markdown-body table th {
  font-weight: 600;
}
.markdown-body table td, .markdown-body table th {
  border: 1px solid #dfe2e5;
  padding: 6px 13px;
}
.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #c6cbd1;
}
.markdown-body table tr:nth-child(2n) {
  background-color: #f6f8fa;
}
.markdown-body img {
  background-color: #fff;
  box-sizing: content-box;
  max-width: 100%;
}
.markdown-body img[align=right] {
  padding-left: 20px;
}
.markdown-body img[align=left] {
  padding-right: 20px;
}
.markdown-body code {
  background-color: rgba(27, 31, 35, .05);
  border-radius: 3px;
  font-size: 85%;
  margin: 0;
  padding: .2em .4em;
}
.markdown-body pre {
  word-wrap: normal;
}
.markdown-body pre>code {
  background: transparent;
  border: 0;
  font-size: 100%;
  margin: 0;
  padding: 0;
  white-space: pre;
  word-break: normal;
}
.markdown-body .highlight {
  margin-bottom: 16px;
}
.markdown-body .highlight pre {
  margin-bottom: 0;
  word-break: normal;
}
.markdown-body .highlight pre, .markdown-body pre {
  background-color: #f6f8fa;
  border-radius: 3px;
  font-size: 85%;
  line-height: 1.45;
  overflow: auto;
  padding: 16px;
}
.markdown-body pre code {
  background-color: transparent;
  border: 0;
  display: inline;
  line-height: inherit;
  margin: 0;
  max-width: auto;
  overflow: visible;
  padding: 0;
  word-wrap: normal;
}
.markdown-body .commit-tease-sha {
  color: #444d56;
  display: inline-block;
  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;
  font-size: 90%;
}
.markdown-body .blob-wrapper {
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
  overflow-x: auto;
  overflow-y: hidden;
}
.markdown-body .blob-wrapper-embedded {
  max-height: 240px;
  overflow-y: auto;
}
.markdown-body .blob-num {
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-user-select: none;
  color: rgba(27, 31, 35, .3);
  cursor: pointer;
  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;
  font-size: 12px;
  line-height: 20px;
  min-width: 50px;
  padding-left: 10px;
  padding-right: 10px;
  text-align: right;
  user-select: none;
  vertical-align: top;
  white-space: nowrap;
  width: 1%;
}
.markdown-body .blob-num:hover {
  color: rgba(27, 31, 35, .6);
}
.markdown-body .blob-num:before {
  content: attr(data-line-number);
}
.markdown-body .blob-code {
  line-height: 20px;
  padding-left: 10px;
  padding-right: 10px;
  position: relative;
  vertical-align: top;
}
.markdown-body .blob-code-inner {
  color: #24292e;
  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;
  font-size: 12px;
  overflow: visible;
  white-space: pre;
  word-wrap: normal;
}
.markdown-body .pl-token.active, .markdown-body .pl-token:hover {
  background: #ffea7f;
  cursor: pointer;
}
.markdown-body kbd {
  background-color: #fafbfc;
  border: 1px solid #d1d5da;
  border-bottom-color: #c6cbd1;
  border-radius: 3px;
  box-shadow: inset 0 -1px 0 #c6cbd1;
  color: #444d56;
  display: inline-block;
  font: 11px SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;
  line-height: 10px;
  padding: 3px 5px;
  vertical-align: middle;
}
.markdown-body :checked+.radio-label {
  border-color: #0366d6;
  position: relative;
  z-index: 1;
}
.markdown-body .tab-size[data-tab-size="1"] {
  -moz-tab-size: 1;
  tab-size: 1;
}
.markdown-body .tab-size[data-tab-size="2"] {
  -moz-tab-size: 2;
  tab-size: 2;
}
.markdown-body .tab-size[data-tab-size="3"] {
  -moz-tab-size: 3;
  tab-size: 3;
}
.markdown-body .tab-size[data-tab-size="4"] {
  -moz-tab-size: 4;
  tab-size: 4;
}
.markdown-body .tab-size[data-tab-size="5"] {
  -moz-tab-size: 5;
  tab-size: 5;
}
.markdown-body .tab-size[data-tab-size="6"] {
  -moz-tab-size: 6;
  tab-size: 6;
}
.markdown-body .tab-size[data-tab-size="7"] {
  -moz-tab-size: 7;
  tab-size: 7;
}
.markdown-body .tab-size[data-tab-size="8"] {
  -moz-tab-size: 8;
  tab-size: 8;
}
.markdown-body .tab-size[data-tab-size="9"] {
  -moz-tab-size: 9;
  tab-size: 9;
}
.markdown-body .tab-size[data-tab-size="10"] {
  -moz-tab-size: 10;
  tab-size: 10;
}
.markdown-body .tab-size[data-tab-size="11"] {
  -moz-tab-size: 11;
  tab-size: 11;
}
.markdown-body .tab-size[data-tab-size="12"] {
  -moz-tab-size: 12;
  tab-size: 12;
}
.markdown-body .task-list-item {
  list-style-type: none;
}
.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}
.markdown-body .task-list-item input {
  margin: 0 .2em .25em -1.6em;
  vertical-align: middle;
}
.markdown-body hr {
  border-bottom-color: #eee;
}
.markdown-body .pl-0 {
  padding-left: 0 !important;
}
.markdown-body .pl-1 {
  padding-left: 4px !important;
}
.markdown-body .pl-2 {
  padding-left: 8px !important;
}
.markdown-body .pl-3 {
  padding-left: 16px !important;
}
.markdown-body .pl-4 {
  padding-left: 24px !important;
}
.markdown-body .pl-5 {
  padding-left: 32px !important;
}
.markdown-body .pl-6 {
  padding-left: 40px !important;
}
.markdown-body .pl-7 {
  padding-left: 48px !important;
}
.markdown-body .pl-8 {
  padding-left: 64px !important;
}
.markdown-body .pl-9 {
  padding-left: 80px !important;
}
.markdown-body .pl-10 {
  padding-left: 96px !important;
}
.markdown-body .pl-11 {
  padding-left: 112px !important;
}
.markdown-body .pl-12 {
  padding-left: 128px !important;
}`

	// nolint: errcheck
	w.Write([]byte(content))
}
func servicePageHandler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, mimeHTML)

	const content = `<!DOCTYPE html><html lang=en><head><title>Animal Bars</title><meta name='generator' content='github.com/stroem/go-service-doc'><link rel="stylesheet" href="/docs/service/markdown.css"></head><body class="markdown-body"><div class="flex-container"><div class="menu-container"><div  class=menu-header><h1>Animal Bars</h1><form class=menu-search action="/docs/service/search" method="get"><input type="text" placeholder="Search.." name="q" value="" onfocus="var temp_value=this.value; this.value=''; this.value=temp_value" autofocus /><button type="submit">Search</button></form></div><ul><li><a href="/docs/service#animal_bars">Animal Bars</a></li><li><a href="/docs/service/donkey-bar#donkey">Donkey Bar</a><ul><li><a href="/docs/service/donkey-bar#code_examples">Code Examples</a></li></ul></li><li><a href="/docs/service/monkey-bar#monkey">Monkey Bar</a><ul><li><a href="/docs/service/monkey-bar#code_examples">Code Examples</a></li></ul></li></ul></div><div class="doc-container"><h1 id="animal_bars">Animal Bars</h1><p><img src="/docs/service/static/animal-bars.svg" alt="The bars" /></p></div></div></body></html>`

	// nolint: errcheck
	w.Write([]byte(content))
}

func donkeyBarPageHandler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, mimeHTML)

	const content = `<!DOCTYPE html><html lang=en><head><title>Animal Bars</title><meta name='generator' content='github.com/stroem/go-service-doc'><link rel="stylesheet" href="/docs/service/markdown.css"></head><body class="markdown-body"><div class="flex-container"><div class="menu-container"><div  class=menu-header><h1>Animal Bars</h1><form class=menu-search action="/docs/service/search" method="get"><input type="text" placeholder="Search.." name="q" value="" onfocus="var temp_value=this.value; this.value=''; this.value=temp_value" autofocus /><button type="submit">Search</button></form></div><ul><li><a href="/docs/service#animal_bars">Animal Bars</a></li><li><a href="/docs/service/donkey-bar#donkey">Donkey Bar</a><ul><li><a href="/docs/service/donkey-bar#code_examples">Code Examples</a></li></ul></li><li><a href="/docs/service/monkey-bar#monkey">Monkey Bar</a><ul><li><a href="/docs/service/monkey-bar#code_examples">Code Examples</a></li></ul></li></ul></div><div class="doc-container"><h1 id="donkey">Donkey Bar</h1><h2 id="code_examples">Code Examples</h2><h3 id="go">go</h3><pre><code class="language-go">var i = 0
</code></pre><h3 id="js">js</h3><pre><code class="language-javascript">let i = 0
</code></pre></div></div></body></html>`

	// nolint: errcheck
	w.Write([]byte(content))
}

func monkeyBarPageHandler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, mimeHTML)

	const content = `<!DOCTYPE html><html lang=en><head><title>Animal Bars</title><meta name='generator' content='github.com/stroem/go-service-doc'><link rel="stylesheet" href="/docs/service/markdown.css"></head><body class="markdown-body"><div class="flex-container"><div class="menu-container"><div  class=menu-header><h1>Animal Bars</h1><form class=menu-search action="/docs/service/search" method="get"><input type="text" placeholder="Search.." name="q" value="" onfocus="var temp_value=this.value; this.value=''; this.value=temp_value" autofocus /><button type="submit">Search</button></form></div><ul><li><a href="/docs/service#animal_bars">Animal Bars</a></li><li><a href="/docs/service/donkey-bar#donkey">Donkey Bar</a><ul><li><a href="/docs/service/donkey-bar#code_examples">Code Examples</a></li></ul></li><li><a href="/docs/service/monkey-bar#monkey">Monkey Bar</a><ul><li><a href="/docs/service/monkey-bar#code_examples">Code Examples</a></li></ul></li></ul></div><div class="doc-container"><h1 id="monkey">Monkey Bar</h1><h2 id="code_examples">Code Examples</h2><h3 id="go">go</h3><pre><code class="language-go">var i = 0
</code></pre><h3 id="js">js</h3><pre><code class="language-javascript">let i = 0
</code></pre></div></div></body></html>`

	// nolint: errcheck
	w.Write([]byte(content))
}

func animalBarsStaticFileHandler(w http.ResponseWriter, req *http.Request) {
	w.Header().Set(contentType, "image/svg+xml")

	const content = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="361px" height="241px" viewBox="-0.5 -0.5 361 241" style="background-color: rgb(255, 255, 255);"><defs/><g><rect x="0" y="160" width="160" height="80" rx="12" ry="12" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(23.5,188.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="112" height="23" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 21px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 114px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">Monkey Bar</div></div></foreignObject><text x="56" y="22" fill="#000000" text-anchor="middle" font-size="21px" font-family="Helvetica">Monkey Bar</text></switch></g><rect x="200" y="160" width="160" height="80" rx="12" ry="12" fill="#f8cecc" stroke="#b85450" pointer-events="all"/><g transform="translate(224.5,188.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="110" height="23" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 21px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 110px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">Donkey Bar</div></div></foreignObject><text x="55" y="22" fill="#000000" text-anchor="middle" font-size="21px" font-family="Helvetica">Donkey Bar</text></switch></g><path d="M 140 80 L 140 120 L 80 120 L 80 149.9" fill="none" stroke="#000000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 80 156.65 L 75.5 147.65 L 80 149.9 L 84.5 147.65 Z" fill="#000000" stroke="#000000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"/><path d="M 220 80 L 220 120 L 280 120 L 280 149.9" fill="none" stroke="#000000" stroke-width="3" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 280 156.65 L 275.5 147.65 L 280 149.9 L 284.5 147.65 Z" fill="#000000" stroke="#000000" stroke-width="3" stroke-miterlimit="10" pointer-events="all"/><rect x="100" y="0" width="160" height="80" rx="12" ry="12" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><g transform="translate(122.5,28.5)"><switch><foreignObject style="overflow:visible;" pointer-events="all" width="114" height="23" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; font-size: 21px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; vertical-align: top; width: 114px; white-space: nowrap; overflow-wrap: normal; text-align: center;"><div xmlns="http://www.w3.org/1999/xhtml" style="display:inline-block;text-align:inherit;text-decoration:inherit;white-space:normal;">Animal Bars</div></div></foreignObject><text x="57" y="22" fill="#000000" text-anchor="middle" font-size="21px" font-family="Helvetica">Animal Bars</text></switch></g></g></svg>`

	// nolint: errcheck
	w.Write([]byte(content))
}

func searchHandler(searchIndex bleve.Index) func(http.ResponseWriter, *http.Request) {
	return func(w http.ResponseWriter, req *http.Request) {
		queryString := req.URL.Query().Get("q")

		disQuery := bleve.NewDisjunctionQuery()

		for _, q := range strings.Split(queryString, " ") {
			contentFuzzyQuery := bleve.NewFuzzyQuery(q)
			contentFuzzyQuery.FieldVal = "Content"
			contextFuzzyQuery := bleve.NewFuzzyQuery(q)
			contextFuzzyQuery.FieldVal = "Context"

			contentMatchQuery := bleve.NewMatchQuery(q)
			contentMatchQuery.FieldVal = "Content"
			contextMatchQuery := bleve.NewMatchQuery(q)
			contextMatchQuery.FieldVal = "Context"

			disQuery.Disjuncts = append(disQuery.Disjuncts,
				contentFuzzyQuery,
				contextFuzzyQuery,
				contentMatchQuery,
				contextMatchQuery,
			)
		}

		searchRequest := bleve.NewSearchRequest(disQuery)
		searchRequest.Fields = []string{"Context", "HTML", "Link"}

		// nolint: errcheck
		searchResult, _ := searchIndex.Search(searchRequest)

		var result = make([]document, len(searchResult.Hits))
		for idx, hit := range searchResult.Hits {
			cs, ok := hit.Fields["Context"].([]interface{})
			if ok {
				for _, c := range cs {
					result[idx].Context = append(result[idx].Context, c.(string))
				}
			} else {
				result[idx].Context = []string{hit.Fields["Context"].(string)}
			}

			result[idx].HTML = hit.Fields["HTML"].(string)
			result[idx].Link = hit.Fields["Link"].(string)
		}

		w.Header().Set(contentType, mimeHTML)

		// nolint: errcheck
		w.Write(createSearchPage(queryString, result))
	}
}

func createSearchIndex() (searchIndex bleve.Index, err error) {
	indexMapping := bleve.NewIndexMapping()
	if searchIndex, err = bleve.NewMemOnly(indexMapping); err != nil {
		return
	}

	var doc document
	doc = document{
		Link:    "/docs/service#animal_bars",
		Context: []string{`Animal Bars`, `Animal Bars`},
		Content: []string{`Animal Bars`, `The bars`},
		HTML: `<h1 id="animal_bars">Animal Bars</h1>

<p><img src="/docs/service/static/animal-bars.svg" alt="The bars" /></p>`,
	}

	if err = searchIndex.Index("/docs/service#animal_bars", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/donkey-bar#donkey",
		Context: []string{`Animal Bars`, `Donkey Bar`},
		Content: []string{`Donkey Bar`},
		HTML:    `<h1 id="donkey">Donkey Bar</h1>`,
	}

	if err = searchIndex.Index("/docs/service/donkey-bar#donkey", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/donkey-bar#code_examples",
		Context: []string{`Animal Bars`, `Donkey Bar`, `Code Examples`},
		Content: []string{`Code Examples`},
		HTML:    `<h2 id="code_examples">Code Examples</h2>`,
	}

	if err = searchIndex.Index("/docs/service/donkey-bar#code_examples", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/donkey-bar#go",
		Context: []string{`Animal Bars`, `Donkey Bar`, `Code Examples`, `go`},
		Content: []string{`go`, `go
var i = 0`},
		HTML: `<h3 id="go">go</h3>

<pre><code class="language-go">var i = 0
</code></pre>`,
	}

	if err = searchIndex.Index("/docs/service/donkey-bar#go", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/donkey-bar#js",
		Context: []string{`Animal Bars`, `Donkey Bar`, `Code Examples`, `js`},
		Content: []string{`js`, `javascript
let i = 0`},
		HTML: `<h3 id="js">js</h3>

<pre><code class="language-javascript">let i = 0
</code></pre>`,
	}

	if err = searchIndex.Index("/docs/service/donkey-bar#js", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/monkey-bar#monkey",
		Context: []string{`Animal Bars`, `Monkey Bar`},
		Content: []string{`Monkey Bar`},
		HTML:    `<h1 id="monkey">Monkey Bar</h1>`,
	}

	if err = searchIndex.Index("/docs/service/monkey-bar#monkey", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/monkey-bar#code_examples",
		Context: []string{`Animal Bars`, `Monkey Bar`, `Code Examples`},
		Content: []string{`Code Examples`},
		HTML:    `<h2 id="code_examples">Code Examples</h2>`,
	}

	if err = searchIndex.Index("/docs/service/monkey-bar#code_examples", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/monkey-bar#go",
		Context: []string{`Animal Bars`, `Monkey Bar`, `Code Examples`, `go`},
		Content: []string{`go`, `go
var i = 0`},
		HTML: `<h3 id="go">go</h3>

<pre><code class="language-go">var i = 0
</code></pre>`,
	}

	if err = searchIndex.Index("/docs/service/monkey-bar#go", doc); err != nil {
		return
	}

	doc = document{
		Link:    "/docs/service/monkey-bar#js",
		Context: []string{`Animal Bars`, `Monkey Bar`, `Code Examples`, `js`},
		Content: []string{`js`, `javascript
let i = 0`},
		HTML: `<h3 id="js">js</h3>

<pre><code class="language-javascript">let i = 0
</code></pre>`,
	}

	if err = searchIndex.Index("/docs/service/monkey-bar#js", doc); err != nil {
		return
	}

	return
}

func createSearchPage(queryString string, searchResult []document) []byte {
	var result = "<div><h1>Search Result for (" + queryString + ")</h1>"

	for _, doc := range searchResult {
		title := strings.Join(doc.Context, " > ")

		result += `<div class=search-result-card onclick="location.href='` + doc.Link + `';"><h2>` + title + `</h2><div class=search-result-content>` + doc.HTML + `</div></div>`
	}

	result += "</div>"

	page := strings.ReplaceAll(searchPage, "<query_string>", queryString)
	page = strings.ReplaceAll(page, "<search_result>", result)

	return []byte(page)
}

const searchPage = `<!DOCTYPE html><html lang=en><head><title>Animal Bars</title><meta name='generator' content='github.com/stroem/go-service-doc'><link rel="stylesheet" href="/docs/service/markdown.css"></head><body class="markdown-body"><div class="flex-container"><div class="menu-container"><div  class=menu-header><h1>Animal Bars</h1><form class=menu-search action="/docs/service/search" method="get"><input type="text" placeholder="Search.." name="q" value="<query_string>" onfocus="var temp_value=this.value; this.value=''; this.value=temp_value" autofocus /><button type="submit">Search</button></form></div><ul><li><a href="/docs/service#animal_bars">Animal Bars</a></li><li><a href="/docs/service/donkey-bar#donkey">Donkey Bar</a><ul><li><a href="/docs/service/donkey-bar#code_examples">Code Examples</a></li></ul></li><li><a href="/docs/service/monkey-bar#monkey">Monkey Bar</a><ul><li><a href="/docs/service/monkey-bar#code_examples">Code Examples</a></li></ul></li></ul></div><div class="doc-container"><search_result></div></div></body></html>`

type document struct {
	Link    string
	Context []string
	Content []string
	HTML    string
}
